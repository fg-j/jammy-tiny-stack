name: "Find Release Asset"
description: |
  Searches the most recent N releases to find an asset that matches the
  inputted glob. Requires $GITHUB_TOKEN environment variable to be set

inputs:
  asset_pattern:
    description: 'Name/regular expression matching desired asset file'
    required: true
  search_depth:
    description: 'Number of past releases to traverse (from most recent to least). If -1, searches all.'
    required: false
    default: '-1'
  strict:
    description: 'Boolean. If true, the action fails if no matching asset is found'
    required: false
    default: false
outputs:
  asset_url:
    description: 'Download URL of the first matching asset'
    value: ${{ steps.asset.outputs.url }}

runs:
  using: 'composite'
  steps:
  - id: asset
    shell: bash
    run: |
      #!/usr/bin/env bash
      set -euo pipefail

      if [[ -n "${GITHUB_TOKEN}" ]]; then
        echo "Must set \$GITHUB_TOKEN"
        exit 1
      fi

      gh auth status

      if [[ "${{ inputs.search_depth }}" != "-1" ]]; then
        url=$(gh api repos/fg-j/jammy-tiny-stack/releases \
          --method GET \
          --field per_page="${{ inputs.search_depth }}" \
          | jq -r --arg pattern "{{ inputs.asset_pattern }}" \
          '[ .[].assets | .[] | select( .name | test($pattern) ) | .browser_download_url ][0]')
      else
        url=$(gh api repos/fg-j/jammy-tiny-stack/releases \
          --method GET \
          --paginate \
          | jq -r --arg pattern "{{ inputs.asset_pattern }}" \
          '[ .[].assets | .[] | select( .name | test($pattern) ) | .browser_download_url ][0]')
      fi

      if [[ "${url}" == "null" ]]; then
          if [[ "${{ inputs.strict }}" == "true" ]]; then
            echo "No matching asset found."
            exit 1
          fi
        url=""
      fi

      printf "::set-output name=url::%s\n" "${url}"
